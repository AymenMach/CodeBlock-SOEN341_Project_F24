import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import './PeerAssessmentPage.css';
import { useUser } from './UserContext';

const PeerAssessmentPage = () => {
    const { groupId } = useParams();
    const navigate = useNavigate();
    const [members, setMembers] = useState([]);
    const [selectedRatings, setSelectedRatings] = useState({});
    const [comments, setComments] = useState({});
    const { currentUser } = useUser();
    const [currentUserId, setCurrentUserId] = useState(null);

    useEffect(() => {
        if (currentUser) {
            setCurrentUserId(currentUser._id);
        }
    }, [currentUser]);

    useEffect(() => {
        const fetchGroupMembers = async () => {
            try {
                const response = await fetch(`http://localhost:5000/api/groups/${groupId}/participants`);
                if (!response.ok) throw new Error('Failed to fetch group participants');
                
                const participantIds = await response.json();
                const usersResponse = await fetch('http://localhost:5000/api/users');
                const usersData = await usersResponse.json();

                const formattedMembers = participantIds.map(id => {
                    const user = usersData.find(user => user.studentId === id);
                    return {
                        _id: id,
                        name: user ? user.name : 'Unknown',
                    };
                });
                setMembers(formattedMembers);

            } catch (error) {
                console.error('Error fetching group members:', error);
            }
        };

        fetchGroupMembers();
    }, [groupId]);

    const handleEvaluate = async (member) => {
        const rating = selectedRatings[member._id];
        if (!rating || !rating.cooperation || !rating.conceptual || !rating.practical || !rating.workEthic) {
            alert("Please fill in all ratings before submitting.");
            return;
        }

        const newRating = {
            memberId: member._id,
            cooperation: Number(rating.cooperation),
            conceptual: Number(rating.conceptual) || 0,
            practical: Number(rating.practical) || 0,
            workEthic: Number(rating.workEthic) || 0,
            feedback: {
                cooperation: comments[member._id]?.cooperation || '',
                conceptual: comments[member._id]?.conceptual || '',
                practical: comments[member._id]?.practical || '',
                workEthic: comments[member._id]?.workEthic || ''
            }
        };

        console.log("Submitted Evaluation Data:", newRating);

        if (!currentUserId) {
            alert("You must be logged in to submit an assessment.");
            return;
        }

        try {
            const response = await fetch(`http://localhost:5000/api/assessments`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    groupId,
                    assessorId: currentUserId,
                    ratings: [newRating]
                }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                alert(errorData?.message || 'Failed to submit assessment');
                return;
            }

            alert('Assessment submitted successfully!');
        } catch (error) {
            console.error('Error submitting assessment:', error);
            alert('An error occurred while submitting the assessment.');
        }
    };

    const handleRatingChange = (memberId, category, value) => {
        setSelectedRatings((prev) => ({
            ...prev,
            [memberId]: {
                ...prev[memberId],
                [category]: value,
            },
        }));
    };

    const handleCommentChange = (memberId, category, value) => {
        setComments((prev) => ({
            ...prev,
            [memberId]: {
                ...prev[memberId],
                [category]: value,
            },
        }));
    };
